<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccessDenied" xml:space="preserve">
    <value>User has denied access to the client</value>
  </data>
  <data name="AskTokenInvalidClient" xml:space="preserve">
    <value>Invalid client</value>
  </data>
  <data name="AskTokenInvalidGrant" xml:space="preserve">
    <value>Invalid code</value>
  </data>
  <data name="AuthorizeClientIdParameterMandatory" xml:space="preserve">
    <value>client_id is mandatory</value>
  </data>
  <data name="AuthorizeResponseTypeParameterMandatory" xml:space="preserve">
    <value>response_type is mandatory</value>
  </data>
  <data name="AuthorizeUnsupportedResponseType" xml:space="preserve">
    <value>response_type should be code or token</value>
  </data>
  <data name="ClientIdParameterError" xml:space="preserve">
    <value>Client id parameter mandatory</value>
  </data>
  <data name="CodeParameterError" xml:space="preserve">
    <value>Code parameter must be define</value>
  </data>
  <data name="CreateRessourceServerEmptyScopeWording" xml:space="preserve">
    <value>Scope wording is null</value>
  </data>
  <data name="CreateRessourceServerExistingLogin" xml:space="preserve">
    <value>Login already used</value>
  </data>
  <data name="CreateRessourceServerExistingScope" xml:space="preserve">
    <value>Scope already exist</value>
  </data>
  <data name="CreateRessourceServerInvalidUserName" xml:space="preserve">
    <value>User don't exist or ban</value>
  </data>
  <data name="CreateRessourceServerMultipleScopeWording" xml:space="preserve">
    <value>Multiple scopes wording find</value>
  </data>
  <data name="CreateRessourceServerNonAdminUserName" xml:space="preserve">
    <value>User isn't admin</value>
  </data>
  <data name="CreateRessourceServerPasswordDontMatch" xml:space="preserve">
    <value>Passwords don't match</value>
  </data>
  <data name="CreateRessourceServerPasswordPolicyFailed" xml:space="preserve">
    <value>Password don't match policy</value>
  </data>
  <data name="CreateReturnUrlBadUserNameOrClientId" xml:space="preserve">
    <value>User and client aren't linked</value>
  </data>
  <data name="CreateReturnUrlInvalidClient" xml:space="preserve">
    <value>Invalid or non existing client</value>
  </data>
  <data name="CreateReturnUrlInvalidUser" xml:space="preserve">
    <value>Invalid or non existing user</value>
  </data>
  <data name="CreateReturnUrlReturnUrlIncorrect" xml:space="preserve">
    <value>Incorrect return url</value>
  </data>
  <data name="CreateUserClientClientAlreadyRegister" xml:space="preserve">
    <value>Client already register</value>
  </data>
  <data name="CreateUserClientInvalidClientPublicId" xml:space="preserve">
    <value>Client don't exist or ban</value>
  </data>
  <data name="CreateUserClientInvalidUserName" xml:space="preserve">
    <value>User don't exist or ban</value>
  </data>
  <data name="CreateUserEmailExists" xml:space="preserve">
    <value>Email address {0} already in use</value>
  </data>
  <data name="CreateUserPasswordDontMatch" xml:space="preserve">
    <value>Passwords don't match</value>
  </data>
  <data name="CreateUserPasswordPolicyFailed" xml:space="preserve">
    <value>Password don't match policy</value>
  </data>
  <data name="CreateUserUserNameExists" xml:space="preserve">
    <value>User name {0} already in use</value>
  </data>
  <data name="DeleteClientInvalidUserName" xml:space="preserve">
    <value>User invalid or ban</value>
  </data>
  <data name="DeleteClientUnknowClient" xml:space="preserve">
    <value>Unknow client</value>
  </data>
  <data name="DeleteClientWrongUser" xml:space="preserve">
    <value>Client don't belong to user, or user isn't client creator</value>
  </data>
  <data name="DeleteRessourceServerInvalidUserName" xml:space="preserve">
    <value>User invalid or ban</value>
  </data>
  <data name="DeleteRessourceServerNonAdminUserName" xml:space="preserve">
    <value>User don't have right to do this action</value>
  </data>
  <data name="DeleteRessourceServerRessourceServerNotFound" xml:space="preserve">
    <value>Can not find ressource server</value>
  </data>
  <data name="DeleteReturnUrlBadUserNameOrClientId" xml:space="preserve">
    <value>User and client aren't linked</value>
  </data>
  <data name="DeleteReturnUrlInvalidUser" xml:space="preserve">
    <value>Invalid or non existing user</value>
  </data>
  <data name="DeleteReturnUrlUnknowReturnUrl" xml:space="preserve">
    <value>Cannot find return url</value>
  </data>
  <data name="DeleteUserNoUserFound" xml:space="preserve">
    <value>User don't exist</value>
  </data>
  <data name="ModelNull" xml:space="preserve">
    <value>Cannot validate a null object</value>
  </data>
  <data name="PasswordParameterError" xml:space="preserve">
    <value>Password is mandatory</value>
  </data>
  <data name="RefreshTokenInvalid" xml:space="preserve">
    <value>Invalid refresh token</value>
  </data>
  <data name="RefreshTokenParameterError" xml:space="preserve">
    <value>Refresh token is mandatory</value>
  </data>
  <data name="ReturnUrlParameterError" xml:space="preserve">
    <value>Return url missing or invalid</value>
  </data>
  <data name="SearchClientAskTooMuch" xml:space="preserve">
    <value>You cannot ask for more than 50 results</value>
  </data>
  <data name="SearchClientInvalidUser" xml:space="preserve">
    <value>User don't exist or ban</value>
  </data>
  <data name="SearchRessourceServerAskTooMuch" xml:space="preserve">
    <value>You cannot ask for more than 50 results</value>
  </data>
  <data name="UnauthorizedClient" xml:space="preserve">
    <value>Client isn't authorized</value>
  </data>
  <data name="UnauthorizedScope" xml:space="preserve">
    <value>Unauthorized scope</value>
  </data>
  <data name="UnsupportedGrantType" xml:space="preserve">
    <value>Unsupported grant type</value>
  </data>
  <data name="UpdateClientInvalidClient" xml:space="preserve">
    <value>Non existing or invalid client</value>
  </data>
  <data name="UpdateClientInvalidUser" xml:space="preserve">
    <value>User not valid</value>
  </data>
  <data name="UpdateClientNameAlreadyUsed" xml:space="preserve">
    <value>Name already used</value>
  </data>
  <data name="UpdateClientpublicIdAlreadyUsed" xml:space="preserve">
    <value>Public Id already used</value>
  </data>
  <data name="UpdateClientScopeDontExists" xml:space="preserve">
    <value>Unknow scope</value>
  </data>
  <data name="UpdateRessourceServerInvalidUserName" xml:space="preserve">
    <value>User invalid or ban</value>
  </data>
  <data name="UpdateRessourceServerNonAdminUserName" xml:space="preserve">
    <value>User don't have right to do this action</value>
  </data>
  <data name="UpdateRessourceServerRessourceServerNotFound" xml:space="preserve">
    <value>Can not find ressource server</value>
  </data>
  <data name="UpdateReturnUrlBadUserNameOrClientId" xml:space="preserve">
    <value>User and client aren't linked</value>
  </data>
  <data name="UpdateReturnUrlInvalidUser" xml:space="preserve">
    <value>Invalid or non existing user</value>
  </data>
  <data name="UpdateReturnUrlReturnUrlIncorrect" xml:space="preserve">
    <value>Incorrect return url</value>
  </data>
  <data name="UpdateReturnUrlUnknowReturnUrl" xml:space="preserve">
    <value>Cannot find return url</value>
  </data>
  <data name="UpdateUserClientClientNotValid" xml:space="preserve">
    <value>User not valid</value>
  </data>
  <data name="UpdateUserClientUserNotValid" xml:space="preserve">
    <value>Client not valid</value>
  </data>
  <data name="UpdateUserClientUserOrClientNotFound" xml:space="preserve">
    <value>There is no link between this client and this user</value>
  </data>
  <data name="UpdateUserNoUserFound" xml:space="preserve">
    <value>User don't exist or ban</value>
  </data>
  <data name="UserCredentialsIncorrects" xml:space="preserve">
    <value>User name or password incorrects</value>
  </data>
  <data name="UserNameParameterError" xml:space="preserve">
    <value>User name is mandatory</value>
  </data>
  <data name="ValidateUserEverValidated" xml:space="preserve">
    <value>User already validated</value>
  </data>
  <data name="ValidateUserInvalidToken" xml:space="preserve">
    <value>Invalid token</value>
  </data>
  <data name="ValidateUserNoUserFound" xml:space="preserve">
    <value>Unknow user</value>
  </data>
  <data name="ChangeUserPasswordDifferentsNewPasswords" xml:space="preserve">
    <value>Mismatching new passwords</value>
  </data>
  <data name="ChangeUserPasswordNewPasswordDontMatchPolicy" xml:space="preserve">
    <value>Password don't match policy</value>
  </data>
  <data name="ChangeUserPasswordPasswordInvalid" xml:space="preserve">
    <value>Invalid password</value>
  </data>
  <data name="ChangeUserPasswordUserInvalid" xml:space="preserve">
    <value>User don't exist or ban</value>
  </data>
  <data name="SendMailLostPasswordUserNoUserFound" xml:space="preserve">
    <value>Unknow email</value>
  </data>
  <data name="SetNewUserPasswordDifferentsNewPasswords" xml:space="preserve">
    <value>Mismatching new passwords</value>
  </data>
  <data name="SetNewUserPasswordInvalidToken" xml:space="preserve">
    <value>Invalid token</value>
  </data>
  <data name="SetNewUserPasswordNewPasswordDontMatchPolicy" xml:space="preserve">
    <value>Password don't match policy</value>
  </data>
</root>