@{
    Layout = "_fr.layout";
}

<h1>Documentation</h1>

<h3>Custom middleware pour ressource server</h3>

<pre class="prettyprint">
    using DaGetV2.Service;
    using Microsoft.AspNetCore.Http;
    using Microsoft.Extensions.Configuration;
    using Microsoft.Extensions.Primitives;
    using System;
    using System.Net;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Text;
    using System.Threading.Tasks;

    namespace DaGetV2.Api
    {
        public class DaOAuthIntrospectionMiddleware
        {
            private readonly RequestDelegate _next;
            private readonly AppConfiguration _conf;

            public string DaAOuthIntrospectionUrl { get; set; }

            public DaOAuthIntrospectionMiddleware(RequestDelegate next, IConfiguration Configuration)
            {
            _next = next;
            _conf = Configuration.GetSection("AppConfiguration").Get<AppConfiguration>();
        }

        public async Task InvokeAsync(HttpContext context)
        {
            StringValues token = string.Empty;
            if (!context.Request.Headers.TryGetValue("access_token", out token))
            await ExitWithUnauthorize(context);

            // challenge access_token
            var formContent = new MultipartFormDataContent()
            {
                { new StringContent(token),  "token" }
            };

            var httpClient = new HttpClient();
            httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic",
            Convert.ToBase64String(
            Encoding.UTF8.GetBytes($"{_conf.RessourceServerName}:{_conf.Password}")));

            var request = new HttpRequestMessage(HttpMethod.Post, _conf.IntrospectionEndPoint)
            {
                Content = formContent
            };

            var response = await httpClient.SendAsync(request);

            if ((int)response.StatusCode >= 300)
            await ExitWithUnauthorize(context);

            var result = await response.Content.ReadAsAsync<Result>();

            if (!result.active)
            await ExitWithUnauthorize(context);

            context.Request.Headers.Add("username", result.name);

            await _next(context);
            }

            private static async Task ExitWithUnauthorize(HttpContext context)
            {
                await context.Response.WriteAsync("access_token header missing or invalid token");
                context.Response.StatusCode = (int)HttpStatusCode.Unauthorized;
                await Task.CompletedTask;
            }

            private class Result
            {
                public bool active { get; set; }
                public long exp { get; set; }
                public string[] aud { get; set; }
                public string client_id { get; set; }
                public string name { get; set; }
                public string scope { get; set; }
            }
        }
    }

</pre>

<h3>Startup pour client</h3>

<pre class="prettyprint">
    using Microsoft.AspNetCore.Authentication;
    using Microsoft.AspNetCore.Authentication.Cookies;
    using Microsoft.AspNetCore.Authentication.OAuth;
    using Microsoft.AspNetCore.Builder;
    using Microsoft.AspNetCore.Hosting;
    using Microsoft.AspNetCore.Http;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.Extensions.Configuration;
    using Microsoft.Extensions.DependencyInjection;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Security.Claims;
    using System.Threading.Tasks;

    namespace DaGetV2.Gui
    {
        public class Startup
        {
            public Startup(IConfiguration configuration)
            {
                Configuration = configuration;
            }

            public IConfiguration Configuration { get; }

            public void ConfigureServices(IServiceCollection services)
            {
                // extract configuration from json configuration file
                // should specify client id, client secret, authorize endpoint and token endpoint
                services.Configure<AppConfiguration>(Configuration.GetSection("AppConfiguration"));
                var conf = Configuration.GetSection("AppConfiguration").Get<AppConfiguration>();

                services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1);

                services.AddAuthentication(options =>
                {
                    options.DefaultAuthenticateScheme = CookieAuthenticationDefaults.AuthenticationScheme;
                    options.DefaultSignInScheme = CookieAuthenticationDefaults.AuthenticationScheme;
                    options.DefaultChallengeScheme = "DaOAuth";
                })            
               .AddCookie(options =>
               {
                   options.Events.OnValidatePrincipal = context =>
                   {
                       if (context.Principal.Identity.IsAuthenticated)
                       {
                           var tokens = context.Properties.GetTokens();
                           var exp = tokens.FirstOrDefault(t => t.Name == "expires_at");
                           var expires = DateTime.Parse(exp.Value);

                           if (expires < DateTime.Now.AddSeconds(-120)) // check for token expiration, if expire, challenge new token
                           {
                               context.RejectPrincipal();
                               return Task.CompletedTask;
                           }
                       }
                       return Task.CompletedTask;
                   };
               })
               .AddOAuth<OAuthOptions, DaOAuthHandler<OAuthOptions>>("DaOAuth", options =>
               {
                   options.AuthorizationEndpoint = conf.AuthorizeEndpoint;
                   options.ClientId = conf.ClientId;
                   options.ClientSecret = conf.ClientSecret;
                   options.CallbackPath = new PathString("/authorization-code/callback");
                   options.TokenEndpoint = conf.TokenEndpoint;

                   options.Scope.Add("scope1");
                   options.Scope.Add("scope2");
                   options.Scope.Add("scope3");

                   options.SaveTokens = true;

                   options.Events = new OAuthEvents
                   {
                       OnCreatingTicket = async context =>
                       {
                           context.Principal.AddIdentity(new System.Security.Claims.ClaimsIdentity(new List<Claim>()
                           {
                               new Claim("access_token", context.AccessToken)
                           }));

                           await Task.CompletedTask;
                       }
                   };
               });
            }
            public void Configure(IApplicationBuilder app, IHostingEnvironment env)
            {
                if (env.IsDevelopment())
                {
                    app.UseDeveloperExceptionPage();
                }
                else
                {
                    app.UseExceptionHandler("/Home/Error");
                    app.UseHsts();
                }

                app.UseHttpsRedirection();
                app.UseStaticFiles();
                app.UseCookiePolicy();
                app.UseAuthentication();

                app.UseMvc(routes =>
                {
                    routes.MapRoute(
                        name: "default",
                        template: "{controller=Home}/{action=Index}/{id?}");
                });
            }
        }
    }

</pre>

<h3>Custom handler pour ajouter le header d'autorisation lors de la demande de token</h3>

<pre class="prettyprint">
    using Microsoft.AspNetCore.Authentication;
    using Microsoft.AspNetCore.Authentication.OAuth;
    using Microsoft.Extensions.Logging;
    using Microsoft.Extensions.Options;
    using Newtonsoft.Json.Linq;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Text;
    using System.Text.Encodings.Web;
    using System.Threading.Tasks;

    namespace DaGetV2.Gui
    {
        public class DaOAuthHandler<TOptions> : OAuthHandler<TOptions> where TOptions : OAuthOptions, new()
        {
            public DaOAuthHandler(IOptionsMonitor<TOptions> options, ILoggerFactory logger, UrlEncoder encoder, ISystemClock clock)
              : base(options, logger, encoder, clock)
            { }

            protected override async Task<OAuthTokenResponse> ExchangeCodeAsync(string code, string redirectUri)
            {
                var tokenRequestParameters = new Dictionary<string, string>()
                {
                    { "client_id", Options.ClientId },
                    { "redirect_uri", redirectUri },
                    { "client_secret", Options.ClientSecret },
                    { "code", code },
                    { "grant_type", "authorization_code" },
                };

                var requestContent = new FormUrlEncodedContent(tokenRequestParameters);

                var requestMessage = new HttpRequestMessage(HttpMethod.Post, Options.TokenEndpoint);
                requestMessage.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
                requestMessage.Headers.Authorization = new AuthenticationHeaderValue("Basic",
                   Convert.ToBase64String(
                        Encoding.UTF8.GetBytes($"{Options.ClientId}:{Options.ClientSecret}")));
                requestMessage.Content = requestContent;
                var response = await Backchannel.SendAsync(requestMessage, Context.RequestAborted);
                if (response.IsSuccessStatusCode)
                {
                    var payload = JObject.Parse(await response.Content.ReadAsStringAsync());
                    return OAuthTokenResponse.Success(payload);
                }
                else
                {
                    var error = "OAuth token endpoint failure: " + await Display(response);
                    return OAuthTokenResponse.Failed(new Exception(error));
                }
            }

            private static async Task<string> Display(HttpResponseMessage response)
            {
                var output = new StringBuilder();
                output.Append("Status: " + response.StatusCode + ";");
                output.Append("Headers: " + response.Headers.ToString() + ";");
                output.Append("Body: " + await response.Content.ReadAsStringAsync() + ";");
                return output.ToString();
            }
        }
    }

</pre>